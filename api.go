// Code generated by "mock-expect-gen -type Consul -pkg mockconsul -endpoints consul-endpoints.json -output ./api.go"; DO NOT EDIT.

package mockconsul

import (
	"fmt"
	mockapi "github.com/mkeeler/mock-http-api"
)

type Consul struct {
	*mockapi.MockAPI
}

func NewConsul(t mockapi.TestingT) *Consul {
	return &Consul{
		MockAPI: mockapi.NewMockAPI(t),
	}
}

func (m *Consul) ACLAuthMethodCreate(body map[string]interface{}, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("PUT", "/v1/acl/auth-method").WithBody(body)

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLAuthMethodDelete(authMethodName string, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("DELETE", fmt.Sprintf("/v1/acl/auth-method/%s", authMethodName))

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLAuthMethodGet(authMethodName string, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", fmt.Sprintf("/v1/acl/auth-method/%s", authMethodName))

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLAuthMethodList(status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", "/v1/acl/auth-methods")

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLAuthMethodUpdate(authMethodName string, body map[string]interface{}, status int) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("PUT", fmt.Sprintf("/v1/acl/auth-method/%s", authMethodName)).WithBody(body)

	return m.WithNoResponseBody(req, status)
}

func (m *Consul) ACLBindingRuleCreate(body map[string]interface{}, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("PUT", "/v1/acl/binding-rule").WithBody(body)

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLBindingRuleDelete(bindingRuleID string, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("DELETE", fmt.Sprintf("/v1/acl/binding-rule/%s", bindingRuleID))

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLBindingRuleGet(bindingRuleID string, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", fmt.Sprintf("/v1/acl/binding-rule/%s", bindingRuleID))

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLBindingRuleList(status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", "/v1/acl/binding-rules")

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLBindingRuleUpdate(bindingRuleID string, body map[string]interface{}, status int) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("PUT", fmt.Sprintf("/v1/acl/binding-rule/%s", bindingRuleID)).WithBody(body)

	return m.WithNoResponseBody(req, status)
}

func (m *Consul) ACLBootstrap(status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("PUT", "/v1/acl/bootstrap")

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLLogin(body map[string]interface{}, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("POST", "/v1/acl/login").WithBody(body)

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLLogout(status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("POST", "/v1/acl/logout")

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLPolicyCreate(body map[string]interface{}, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("PUT", "/v1/acl/policy").WithBody(body)

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLPolicyDelete(policyID string, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("DELETE", fmt.Sprintf("/v1/acl/policy/%s", policyID))

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLPolicyGet(policyID string, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", fmt.Sprintf("/v1/acl/policy/%s", policyID))

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLPolicyGetByName(policyName string, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", fmt.Sprintf("/v1/acl/policy/name/%s", policyName))

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLPolicyList(status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", "/v1/acl/policies")

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLPolicyUpdate(policyID string, body map[string]interface{}, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("PUT", fmt.Sprintf("/v1/acl/policy/%s", policyID)).WithBody(body)

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLReplication(status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", "/v1/acl/replication")

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLRoleCreate(body map[string]interface{}, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("PUT", "/v1/acl/role").WithBody(body)

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLRoleDelete(roleID string, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("DELETE", fmt.Sprintf("/v1/acl/role/%s", roleID))

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLRoleGet(roleID string, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", fmt.Sprintf("/v1/acl/role/%s", roleID))

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLRoleGetByName(roleName string, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", fmt.Sprintf("/v1/acl/role/name/%s", roleName))

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLRoleList(status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", "/v1/acl/roles")

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLRoleUpdate(roleID string, body map[string]interface{}, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("PUT", fmt.Sprintf("/v1/acl/role/%s", roleID)).WithBody(body)

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLRulesTranslate(status int) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("POST", "/v1/acl/rules/translate")

	return m.WithNoResponseBody(req, status)
}

func (m *Consul) ACLRulesTranslateFromToken(tokenID string, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", fmt.Sprintf("/v1/acl/rules/translate/%s", tokenID))

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLTokenCreate(status int) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("PUT", "/v1/acl/token")

	return m.WithNoResponseBody(req, status)
}

func (m *Consul) ACLTokenDelete(tokenID string, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("DELETE", fmt.Sprintf("/v1/acl/token/%s", tokenID))

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLTokenGet(tokenID string, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", fmt.Sprintf("/v1/acl/token/%s", tokenID))

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLTokenList(status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", "/v1/acl/tokens")

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLTokenSelf(headers map[string]string, queryParams map[string]string, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", "/v1/acl/token/self").WithQueryParams(queryParams).WithHeaders(headers)

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) ACLTokenUpdate(tokenID string, body map[string]interface{}, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("PUT", fmt.Sprintf("/v1/acl/token/%s", tokenID)).WithBody(body)

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) AgentHost(status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", "/v1/agent/host")

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) AgentInfo(status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", "/v1/agent/self")

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) AgentMaintenance(queryParams map[string]string, status int) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("PUT", "/v1/agent/maintenance").WithQueryParams(queryParams)

	return m.WithNoResponseBody(req, status)
}

func (m *Consul) AgentTokenSet(tokenType string, body map[string]interface{}, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("PUT", fmt.Sprintf("/v1/agent/token/%s", tokenType)).WithBody(body)

	return m.WithJSONReply(req, status, reply)
}
